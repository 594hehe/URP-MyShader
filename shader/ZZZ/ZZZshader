Shader "ZZZ_BODY"
{
    Properties
    {
        [Header(Shader Setting)]
        [Space(5)]
        [KeywordEnum(Base,Hair)] _ShaderEnum("Shader类型",int) = 0
        [Enum(UnityEngine.Rendering.CullMode)]
        _cullMode("剔除模式",float) = 2
        [Enum(UnityEngine.Rendering.CullMode)]
        _cullMode2("背面剔除模式",float) = 1
        [Toggle] _IsNight ("夜晚", int) = 0
        [Toggle] _IsShadow ("外部阴影", int) = 1
        _Shadowqiangdu("阴影强度", Range(0, 0.4)) = 0
        _Eyeslight("自发光亮度", Range(0, 5)) = 1
        _Brightness22("亮面强度", Range(1, 5)) = 1
        [HDR]_lightcolor22("亮面颜色", Color) = (1.0, 1.0, 1.0, 1.0)
       
        [Toggle] _addlight ("间接光", int) = 0
        _addLightInfluence ("间接光照强度", range(0.0, 0.5)) = 0
        //_Shadowlerp("阴影融合", Range(-1, 1)) = 0
        //_Shadowlerp2("阴影融合2", Range(-1, 1)) = 0
       // _shadowColor ("阴影 Color", Color) = (1.0, 1.0, 1.0, 1.0)
        
        //_Shadowlerp3("阴影融合3", Range(-1, 1)) = 0
        //_Shadowlerp4("阴影融合4", Range(-1, 1)) = 0
        [Space(5)]

        [Header(Main Texture Setting)]
        [Space(5)]
		_WorldLightInfluence ("世界灯光", range(0.0, 1.0)) = 0.1
		[HDR][MainColor] _MainColor ("Main Color", Color) = (1.0, 1.0, 1.0, 1.0)
        
        [MainTexture][NoScaleOffset]_MainTex ("Albedo (RGB)", 2D) = "white" {}
		[NoScaleOffset]_NormalTex ("Light Tex", 2D) = "linearGray" {}
        [NoScaleOffset]_LightMap ("Other Data Tex", 2D) = "grey" {}

        [Space(30)]

        [Header(Shadow Setting)]
        [Space(5)]
		
      
         _ShadowSmooth2 ("Shallow Smooth", Range(0, 1)) = 0.7
        _ShadowSmooth3 ("Shallow Smooth2", Range(0, 1)) = 0.8


        _ShadowSmooth1 ("Shadow Smooth", Range(0, 1)) = 0.35
        _ShadowSmooth ("Shadow Smooth2", Range(0, 1)) = 0.45

       


        
        _RampShadowRange ("Ramp Shadow Range", Range(0.5, 0.99)) = 0.99
        
        
       
		
		
		[IntRange]_RampArea1 ("Ramp1 Color", Range(0, 4)) = 0
        [IntRange]_RampArea2 ("Ramp2 Color", Range(0, 4)) = 1
        [IntRange]_RampArea3 ("Ramp3 Color", Range(0, 4)) = 2
		[IntRange]_RampArea4 ("Ramp4 Color", Range(0, 4)) = 3
		[IntRange]_RampArea5 ("Ramp5 Color", Range(0, 4)) = 4

        _ShallowColor ("Shallow Color 1", Color) = (0.8,0.8,0.8,1)
        _ShallowColor2 ("Shallow Color 2", Color) = (0.8,0.8,0.8,1)
        _ShallowColor3 ("Shallow Color 3", Color) = (0.8,0.8,0.8,1)
        _ShallowColor4 ("Shallow Color 4", Color) = (0.8,0.8,0.8,1)
        _ShallowColor5 ("Shallow Color 5", Color) = (0.8,0.8,0.8,1)

		_ShadowColor ("Shadow Color 1", Color) = (0.6,0.6,0.6,1)
		_ShadowColor2 ("Shadow Color 2", Color) = (0.6,0.6,0.6,1)
		_ShadowColor3 ("Shadow Color 3", Color) = (0.6,0.6,0.6,1)
		_ShadowColor4 ("Shadow Color 4", Color) = (0.6,0.6,0.6,1)
		_ShadowColor5 ("Shadow Color 5", Color) = (0.6,0.6,0.6,1)
		[HDR]_RampColor1 ("Ramp Color1", Color) = (1.0, 1.0, 1.0, 1.0)
		[HDR]_RampColor2 ("Ramp Color2", Color) = (1.0, 1.0, 1.0, 1.0)
		[HDR]_RampColor3 ("Ramp Color3", Color) = (1.0, 1.0, 1.0, 1.0)
		[HDR]_RampColor4 ("Ramp Color4", Color) = (1.0, 1.0, 1.0, 1.0)
		[HDR]_RampColor5 ("Ramp Color5", Color) = (1.0, 1.0, 1.0, 1.0)
        [Space(30)]


        [Header(Specular Setting)]
        [Space(5)]
        [Toggle] _EnableSpecular ("Enable Specular", int) = 1
        [Toggle]_UseMatCapMask ("Use MatCap Mask", Float) = 0
        _MetalMap ("Metal Map", 2D) = "white" {}
        _SpecularColor ("Specular Color", Color) = (1.0, 1.0, 1.0, 1.0)
        

        _SpecExpon("高光裁切", Range(0.1, 10)) = 3
        _KsNonMetallic("非金属强度", Range(0, 1)) = 0.1
        _KsMetallic("金属强度", Range(0, 1)) = 1
		
		
        [Space(30)]

        [Header(Rim Setting)]
        [Space(5)]
        [Toggle] _EnableRim ("Enable Rim", int) = 1
        _RimOffset ("边缘宽度", Range(0, 1)) = 1    //粗细
        [HDR]_RimColor ("RimColor", Color) = (0.03773582, 0.03773582, 0.03773582, 1.0)
        
        [Space(30)]

        [Header(Outline Setting)]
        [Space(5)]
        _OutlineWidth ("Outline Width", Range(0, 2)) = 0.5
        _OutlineColor ("Outline Color", Color) = (0, 0, 0, 1)
		
		 [Toggle(ENABLE_ALPHA_CLIPPING)]_EnableAlphaClipping ("EnableAlphaClipping", Float) = 0
        _Cutoff("Cutoff", Range(0,1)) = 0.5
    }
    SubShader
    {
        Tags { "RenderPipeline"="UniversalPipeline" "RenderType"="Opaque"}
        Cull off

        HLSLINCLUDE
        #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
        #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonMaterial.hlsl"
        #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl"
        #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"
        #include "Assets/Scripts/CustomShadowmap/CustomShadows.hlsl"
        //#include "Assets/BOXOPHOBIC/Atmospheric Height Fog/Core/Includes/AtmosphericHeightFog.cginc"

        #pragma shader_feature _SHADERENUM_BASE _SHADERENUM_HAIR _SHADERENUM_FACE
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS //接受阴影
        #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE //产生阴影
        #pragma multi_compile _ _SHADOWS_SOFT //软阴影  
        #pragma shader_feature _ALPHATEST_ON
        #pragma shader_feature _AdditionalLights

        #pragma multi_compile_fragment _ _ADDITIONAL_LIGHT_SHADOWS
        #pragma multi_compile_fragment _ _SHADOWS_SOFT
        #pragma multi_compile_fog
            

        
        TEXTURE2D(_MainTex);            SAMPLER(sampler_MainTex);
		TEXTURE2D(_NormalTex);            SAMPLER(sampler_NormalTex);
        TEXTURE2D(_LightMap);           SAMPLER(sampler_LightMap);
       
        TEXTURE2D(_MetalMap);           SAMPLER(sampler_MetalMap);
     
       // TEXTURE2D(_CameraDepthTexture); SAMPLER(sampler_CameraDepthTexture);

        // 单个材质独有的参数尽量放在 CBUFFER 中，以提高性能
        CBUFFER_START(UnityPerMaterial)
        int _IsNight;
        int _IsShadow;
        int _addlight;
        int _UseMatCapMask;
        float4 _MainTex_ST;
        half4 _MainColor;
		half4 _RampColor1;
		half4 _RampColor2;
		half4 _RampColor3;
		half4 _RampColor4;
		half4 _RampColor5;
        float4 _LightMap_ST;
       
        half _ShadowSmooth;
        half _ShadowSmooth1;
        half _ShadowSmooth2;
        half _ShadowSmooth3;

        half _RampShadowRange;
		float _WorldLightInfluence;
		float _WorldLight;
		float _RampArea1;
        float _RampArea2;
		float _RampArea3;
		float _RampArea4;
        float _RampArea5;
		float _RangeAO;
        float _RangeAO1;
        float _RangeAO2;
        float _Shadowlerp;
        float _Shadowlerp2;
        float _Shadowlerp3;
        float _Shadowlerp4;
        float4 _shadowColor;
		float _NormalScale;
		float _RimBrightness;
		float _Eyeslight;
        int _EnableSpecular;
        
        float4 _MetalMap_ST;
        half4 _SpecularColor;
        half _MetalMapV;
        half _MetalMapIntensity;
        half _KsNonMetallic;
        half _KsMetallic;
        half _SpecExpon;
        float _FaceShadowOffset;
        float _addLightInfluence;
        float _FaceShadowPow;
        int _EnableRim;
        half4 _RimColor;
        half _RimOffset;
        half _RimThreshold;
        half _OutlineWidth;
        half4 _OutlineColor;
        half4 _DarkColor;
		half _Cutoff;
        half _Shadowqiangdu;
        half4 _lightcolor22;
        float _Brightness22;
        half4 _ShadowColor;
        half4 _ShadowColor2;
        half4 _ShadowColor3;
        half4 _ShadowColor4;
        half4 _ShadowColor5;
        half4 _ShallowColor;
        half4 _ShallowColor2;
        half4 _ShallowColor3;
        half4 _ShallowColor4;
        half4 _ShallowColor5;

       
		
        CBUFFER_END

        struct a2v{
            float3 vertex : POSITION;       //顶点坐标
            half4 color : COLOR0;           //顶点色
            half3 normal : NORMAL;          //法线
            half4 tangent : TANGENT;        //切线
            float2 texCoord : TEXCOORD0;    //纹理坐标
        };
        struct v2f{
            float4 pos : POSITION;              //裁剪空间顶点坐标
			//float4 positionCS : SV_POSITION;
            float2 uv : TEXCOORD0;              //uv
            float3 worldPos : TEXCOORD1;        //世界坐标
            float3 worldNormal : TEXCOORD2;     //世界空间法线
            float3 worldTangent : TEXCOORD3;    //世界空间切线
            float3 worldBiTangent : TEXCOORD4;  //世界空间副切线
            float3 positionWS : TEXCOORD6; 
            float4 positionNDC:TEXCOORD5;
            float4 shadowCoord :TEXCOORD8;
            float fogCoord : TEXCOORD9;

            float4 shadowVertex : TEXCOORD7;
            half4 color : COLOR0;               //平滑Rim所需顶点色
        };
		
		
        ENDHLSL

        Pass
        {
            Tags {"LightMode"="UniversalForward" "RenderType"="Opaque"}
			
			Cull [_cullMode]
            ZTest LEqual
            ZWrite on
            Blend One Zero
            
            Stencil{
                Ref 1
                Comp always
                Pass replace
            }
            
            HLSLPROGRAM
			#pragma target 3.0
            #pragma vertex ToonPassVert
            #pragma fragment ToonPassFrag
			#pragma shader_feature_local_fragment ENABLE_ALPHA_CLIPPING
			#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            
            
            
			
            v2f ToonPassVert(a2v v)
            {
                v2f o;
                VertexPositionInputs vertexInput =GetVertexPositionInputs(v.vertex.xyz);
                o.positionWS = vertexInput.positionWS;
                o.positionNDC = vertexInput.positionNDC;
                o.pos = TransformObjectToHClip(v.vertex);
                o.uv = TRANSFORM_TEX(v.texCoord, _MainTex);
                o.worldPos = TransformObjectToWorld(v.vertex);
                // 使用URP自带函数计算世界空间法线
                VertexNormalInputs vertexNormalInput = GetVertexNormalInputs(v.normal, v.tangent);
                o.worldNormal = vertexNormalInput.normalWS;
                o.worldTangent = vertexNormalInput.tangentWS;
                o.worldBiTangent = vertexNormalInput.bitangentWS;
                
                
                o.shadowCoord = TransformWorldToShadowCoord(vertexInput.positionWS);

                o.shadowVertex = mul(_ZorroShadowMatrix, float4(o.worldPos.xyz, 1.0f));
                
                o.color = v.color;
                o.fogCoord = ComputeFogFactor(o.pos.z);
                return o;
            }

            half4 ToonPassFrag(v2f i) : SV_TARGET
            {
                float4 BaseColor = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, i.uv) * _MainColor;
	
				#if ENABLE_ALPHA_CLIPPING
                    clip(BaseColor.a-_Cutoff);
                #endif
				
				
				float4 NormalTex = SAMPLE_TEXTURE2D(_NormalTex,sampler_NormalTex,i.uv); //法线贴图
				float3 normalTS =float3(NormalTex.rg*2-1,0);               //控制法线强度
				normalTS.z = sqrt(1-dot(normalTS.xy,normalTS.xy));         //规范化法线 
				
                
				
                float4 LightMapColor = SAMPLE_TEXTURE2D(_LightMap, sampler_LightMap, i.uv);
                Light mainLight = GetMainLight();
                Light Light1 = GetMainLight(i.shadowCoord);


                half4 LightColor = half4(mainLight.color, 1.0);
                half3 lightDir = normalize(mainLight.direction);
                half3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);
                half3 halfDir = normalize(viewDir + lightDir);
                float3 N=1;
                N=normalize(mul(normalTS,float3x3(i.worldTangent,i.worldBiTangent,i.worldNormal)));
              

                
               
                float3 V=viewDir;
                float3 L=lightDir;
                float3 H=normalize(L+V);

                float NoL=dot(N,normalize(Light1.direction));
                float NoH=dot(N,H);
                float NoV=dot(N,V);

                float3 normalVS = normalize(mul((float3x3)UNITY_MATRIX_V,N));



                float ShadowAO =saturate(smoothstep(0, 0.2,NormalTex.b));// 常暗阴影
                half halfLambert = dot(lightDir, N) * 0.5 + 0.5;
                float halfLambert1 = smoothstep(_ShadowSmooth1, _ShadowSmooth, halfLambert)*ShadowAO;
                float halfLambert2 = smoothstep(_ShadowSmooth2, _ShadowSmooth3, halfLambert);
                
                

              
				float rampVmove = 0.0;

             
 // Base Ramp
                // 灰度0.0-0.2  硬Ramp
                // 灰度0.2-0.4  软Ramp
                // 灰度0.4-0.6  金属层
                // 灰度0.6-0.8  布料层，主要为silk类
                // 灰度0.8-1.0  皮肤/头发层
                    float4 ShadowRamp1 = lerp((_ShadowColor),lerp(_ShallowColor,1,halfLambert2),halfLambert1);
                    float4 ShadowRamp2 = lerp((_ShadowColor2),lerp(_ShallowColor2,1,halfLambert2),halfLambert1);
                    float4 ShadowRamp3 = lerp((_ShadowColor3),lerp(_ShallowColor3,1,halfLambert2),halfLambert1);
                    float4 ShadowRamp4 = lerp((_ShadowColor4),lerp(_ShallowColor4,1,halfLambert2),halfLambert1);
                    float4 ShadowRamp5 = lerp((_ShadowColor5),lerp(_ShallowColor5,1,halfLambert2),halfLambert1);
                   
					float4 AllRamps[5] = {
                        ShadowRamp1, ShadowRamp2, ShadowRamp3, ShadowRamp4, ShadowRamp5
                    };
					float4 eyes=smoothstep(0.51, 1, LightMapColor.g);
					float4 eyes1=smoothstep(1, 0.51, LightMapColor.g);//自发光

                    float4 metalRamp2 = smoothstep(0.8,0.85,LightMapColor.r) * AllRamps[_RampArea1]-eyes;
					float4 metalRamp3 = (smoothstep(0.6,0.65,LightMapColor.r)-smoothstep(0.8,0.85,LightMapColor.r)) * AllRamps[_RampArea2]-eyes;
					float4 metalRamp4 = (smoothstep(0.4,0.45,LightMapColor.r)-smoothstep(0.6,0.65,LightMapColor.r))* AllRamps[_RampArea3]	-eyes;
					float4 metalRamp5 = (smoothstep(0,0.1,LightMapColor.r)-smoothstep(0.4,0.45,LightMapColor.r))* AllRamps[_RampArea4]-eyes;
					float4 metalRamp6 =(1-smoothstep(0,0.1,LightMapColor.r))* AllRamps[_RampArea5]-eyes;

                    float4 allramp =(metalRamp2+metalRamp3+metalRamp4+metalRamp5+metalRamp6)+_Shadowqiangdu;
                    


                    float4 oShadowRamp1 = _ShadowColor;
                    float4 oShadowRamp2 = _ShadowColor2;
                    float4 oShadowRamp3 = _ShadowColor3;
                    float4 oShadowRamp4 = _ShadowColor4;
                    float4 oShadowRamp5 = _ShadowColor5;

                    float4 oAllRamps[5] = {
                        oShadowRamp1, oShadowRamp2, oShadowRamp3, oShadowRamp4, oShadowRamp5
                    };

                    float4 ometalRamp2 = smoothstep(0.8,0.85,LightMapColor.r) * oAllRamps[_RampArea1]-eyes;
					float4 ometalRamp3 = (smoothstep(0.6,0.65,LightMapColor.r)-smoothstep(0.8,0.85,LightMapColor.r)) * oAllRamps[_RampArea2]-eyes;
					float4 ometalRamp4 = (smoothstep(0.4,0.45,LightMapColor.r)-smoothstep(0.6,0.65,LightMapColor.r))* oAllRamps[_RampArea3]	-eyes;
					float4 ometalRamp5 = (smoothstep(0,0.1,LightMapColor.r)-smoothstep(0.4,0.45,LightMapColor.r))* oAllRamps[_RampArea4]-eyes;
					float4 ometalRamp6 =(1-smoothstep(0,0.1,LightMapColor.r))* oAllRamps[_RampArea5]-eyes;

                    float4 oallramp =ometalRamp2+ometalRamp3+ometalRamp4+ometalRamp5+ometalRamp6;


					float allao =halfLambert*ShadowAO;
                //— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —




                float _DepthBias = _ZorroShadowParams.w;
				float3 _ShadowColor = _ZorroShadowParams.xyz;

				float3 shadowVertex = (((i.shadowVertex.xyz / i.shadowVertex.w) * 0.5) + 0.5);

				shadowVertex.z = (shadowVertex.z - _DepthBias);
			#if UNITY_REVERSED_Z //DirectX 
				shadowVertex.z = 1 - shadowVertex.z;
			#else
				
			#endif
				

				//flip Y for sample_CMP ,TODO platform dependent
			#if UNITY_UV_STARTS_AT_TOP //DirectX
				shadowVertex.y = 1 - shadowVertex.y;
			#endif
				
				float t = SAMPLE_TEXTURE2D_SHADOW(_ZorroShadowmapTexture, sampler__ZorroShadowmapTexture, shadowVertex.xyz);
				float tcolor = lerp(0, 1, t);
               //render feature中获取通道阴影贴图

                float4 oshadow = float4(tcolor,tcolor,tcolor,1);
                oshadow =lerp(oallramp,1,tcolor);

                
                float4 rampColor =lerp(allramp, 1,step(_RampShadowRange, allao));
                float4 rampColor1 =lerp(1, allramp,smoothstep(0,1, tcolor)-smoothstep(0.96,1, tcolor));
               
                

                //float4 FinalRamp = rampColor * BaseColor*oshadow;
                float4  FinalRamp=0;
               

                if ( tcolor<allao &&_IsShadow == 1.0)//若处于阴影中
                FinalRamp =rampColor1*oshadow *BaseColor;
                //FinalRamp =  rampColor *BaseColor * oshadow;
                else
                FinalRamp = rampColor * BaseColor;
                
				FinalRamp=FinalRamp*step(abs(LightMapColor.r * 255 - 255), 39)*_RampColor1+FinalRamp*step(abs(LightMapColor.r * 255 - 178), 39)*_RampColor2+FinalRamp*step(abs(LightMapColor.r * 255 - 128), 39)*_RampColor3+FinalRamp*step(abs(LightMapColor.r * 255 - 77), 39)*_RampColor4+FinalRamp*step(abs(LightMapColor.r * 255 - 0), 39)*_RampColor5;
				FinalRamp=eyes1*FinalRamp+(eyes*BaseColor*_Eyeslight);


                
                //==========================================================================================
                // 金属高光

                float lambertStep=smoothstep(0.423,0.450,halfLambert);
                float BlinnPhongSpecular =step(0,dot(N, viewDir))*pow(max(0, dot(N, halfDir)),_SpecExpon);// Blinn-Phong
                float2 MetalMapUV = mul((float3x3) UNITY_MATRIX_V, N).xy * 0.5 + 0.5;//matcap
                float MetalMap = SAMPLE_TEXTURE2D(_MetalMap, sampler_MetalMap, MetalMapUV).r;
                float isMetal=1;

                if (_UseMatCapMask == 1.0)
                {
                    isMetal=LightMapColor.a;
                }
                else
                {
                    isMetal=1;
                }

                float3 metallicSpec = MetalMap*BlinnPhongSpecular*LightMapColor.b*10*_KsMetallic;//金属部分高光
                float3 nonMteallicSpec =smoothstep(0.5,0.6,BlinnPhongSpecular)*LightMapColor.b*_KsNonMetallic; //非金属部分高光
                float3 Specular=lerp(nonMteallicSpec,metallicSpec,LightMapColor.g*isMetal)*_SpecularColor;

                if (_EnableSpecular == 1.0)
                {
                    Specular=Specular+FinalRamp;
                }
                else
                {
                    Specular=FinalRamp;
                }
                float4 FinalSpecular=float4(Specular,1);

               

                //==========================================================================================
                // 屏幕空间深度等宽边缘光
                


                float rimOffset=_RimOffset*6;//宽度
                float rimThreshold=0.03;
                float rimStrength=0.6;
                float rimMax=0.3;

                float2 screenUV=i.positionNDC.xy/i.positionNDC.w;
                float rawDepth=SampleSceneDepth(screenUV);
                float linearDepth=LinearEyeDepth(rawDepth,_ZBufferParams);
                float2 screenOffset= float2(lerp(-1,1,step(0,normalVS.x))*rimOffset/_ScreenParams.x/max(1,pow(linearDepth,2)),0);
                float offsetDepth=SampleSceneDepth(screenUV+screenOffset);
                float offsetLinearDepth=LinearEyeDepth(offsetDepth,_ZBufferParams);
                float rim=saturate(offsetLinearDepth-linearDepth);
                rim=step(rimThreshold,rim)*clamp(rim*rimStrength,0,rimMax)* _EnableRim;

                float fresnelPower =6;
                float fresnelClamp =0.8;
                float fresnel =1-saturate(NoV);
                fresnel =pow(fresnel,fresnelPower);
                fresnel =fresnel * fresnelClamp+(1-fresnelClamp);
                float4 rimc= 1-rim*fresnel;
                rimc=saturate(lerp(FinalSpecular,FinalSpecular+_RimColor,smoothstep(0,0.3,rim)));

                float4 FinalColor =rimc;


                int addLightsCount = GetAdditionalLightsCount();//定义在lighting库函数的方法 返回一个额外灯光的数量
                for (int idx = 0; idx < addLightsCount; idx++)

                {

                	Light addlight = GetAdditionalLight(idx, i.worldPos);//定义在lightling库里的方法 返回一个灯光类型的数据
                	//FinalColor.rgb += addlight.color * FinalColor * addlight.distanceAttenuation *_addLightInfluence;
                    if (_addlight==1)
                    FinalColor.rgb = lerp(FinalColor, addlight.color*_addLightInfluence*FinalColor+(1-_addLightInfluence)*FinalColor,addlight.distanceAttenuation) ;
                    else

                    FinalColor.rgb=FinalColor.rgb;
                    
                    
                }

                FinalColor=lerp(FinalColor,FinalColor*_lightcolor22*_Brightness22,saturate(step(0.9,halfLambert)));




               FinalColor = (_WorldLightInfluence * _MainLightColor * FinalColor + (1 - _WorldLightInfluence) * FinalColor);

               FinalColor.rgb = MixFog(FinalColor.rgb, i.fogCoord);//混合fog

              

                return FinalColor;
               
             //  return allramp;

                
                
				
            }
            ENDHLSL
        }
        Pass {
            Name "back"
            Tags{ "LightMode" = "SRPDefaultUnlit"}
	        Cull [_cullMode2]
            ZTest LEqual
            ZWrite On
            Blend One Zero

            Stencil{
                Ref 1
                Comp always
                Pass replace
            }
	        HLSLPROGRAM
	        #pragma vertex vertback
	        #pragma fragment frag
			#pragma shader_feature_local_fragment ENABLE_ALPHA_CLIPPING
             
	          v2f vertback(a2v input) 
              {
                v2f o;
                o.pos = TransformObjectToHClip(input.vertex);
                o.uv = TRANSFORM_TEX(input.texCoord, _MainTex);
                VertexNormalInputs vertexNormalInput = GetVertexNormalInputs(input.normal, input.tangent);
                o.worldNormal =1- vertexNormalInput.normalWS;
                o.fogCoord = ComputeFogFactor(o.pos.z);
                return o;
	     }
	     float4 frag(v2f input) :  SV_TARGET
        {
            
                 float4 BaseColorback = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv) * _MainColor;
                 float4 LightMapColor = SAMPLE_TEXTURE2D(_LightMap, sampler_LightMap, input.uv);
                 float rampVmove = 0.0;
                 if (_IsNight == 0.0)
                    rampVmove=0;
                 else
                    rampVmove=-0.5;

                    float4 oShadowRamp1 = _ShadowColor;
                    float4 oShadowRamp2 = _ShadowColor2;
                    float4 oShadowRamp3 = _ShadowColor3;
                    float4 oShadowRamp4 = _ShadowColor4;
                    float4 oShadowRamp5 = _ShadowColor5;
                    float4 oAllRamps[5] = {
                        oShadowRamp1, oShadowRamp2, oShadowRamp3, oShadowRamp4, oShadowRamp5
                    };

                    float4 ometalRamp2 = smoothstep(0.8,0.85,LightMapColor.r) * oAllRamps[_RampArea1];
					float4 ometalRamp3 = (smoothstep(0.6,0.65,LightMapColor.r)-smoothstep(0.8,0.85,LightMapColor.r)) * oAllRamps[_RampArea2];
					float4 ometalRamp4 = (smoothstep(0.4,0.45,LightMapColor.r)-smoothstep(0.6,0.65,LightMapColor.r))* oAllRamps[_RampArea3];
					float4 ometalRamp5 = (smoothstep(0,0.1,LightMapColor.r)-smoothstep(0.4,0.45,LightMapColor.r))* oAllRamps[_RampArea4];
					float4 ometalRamp6 =(1-smoothstep(0,0.1,LightMapColor.r))* oAllRamps[_RampArea5];

                    float4 oallramp =ometalRamp2+ometalRamp3+ometalRamp4+ometalRamp5+ometalRamp6;
                    BaseColorback*=oallramp;

                    BaseColorback.rgb = MixFog(BaseColorback.rgb, input.fogCoord);//混合fog
                
                 return BaseColorback;
	     }
            ENDHLSL
        }

        

		Pass
        {
            Tags{"LightMode"="ShadowCaster" }
            HLSLPROGRAM
            #pragma vertex ToonPassVert
            #pragma fragment ToonPassFrag

      

        

            v2f ToonPassVert(a2v i)
            {
                v2f o;
                
                o.uv=TRANSFORM_TEX(i.texCoord,_MainTex);
                
                float3 WSpos=TransformObjectToWorld(i.vertex.xyz);//网格大小
                Light MainLight=GetMainLight();
                MainLight.shadowAttenuation=1;
                float shadowAtten = 0;
                float3 WSnor=TransformObjectToWorldNormal(i.normal.xyz);


                

               o.pos=TransformWorldToHClip(ApplyShadowBias(WSpos,WSnor,MainLight.direction));
              
          



                #if UNITY_REVERSED_Z
                o.pos.z=min(o.pos.z,o.pos.w*UNITY_NEAR_CLIP_VALUE);
                #else
                o.pos.z=max(o.pos.z,o.pos.w*UNITY_NEAR_CLIP_VALUE);
                #endif
                
                return o;
                }
                half4 ToonPassFrag(v2f i):SV_TARGET
                {
                    #ifdef _CUT_ON
                    float alpha=SAMPLE_TEXTURE2D(_MainTex,sampler_MainTex,i.uv).a;
                    clip(alpha-_Cutoff);
                    #endif
                    float4 red;
                    red=(255,1,1,0);
                    return red;
                }
                    ENDHLSL
        }
                    


        
        Pass
        {
            Tags {"LightMode" = "DepthOnly"}
        }
    }
   // CustomEditor "UnityEditor.Rendering.Universal.ShaderGUI.LitShader"
}
